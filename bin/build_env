#!/bin/bash

set -e

function print_usage {
    echo ""
    echo "Usage: build_env <OPTIONS> <SANDBOX>"
    echo ""
    echo "Positional parameters:"
    echo "   <SANDBOX>                         The path to the full build sandbox"
    echo ""
    echo "Options:"
    echo "   -j    --java    [JAVA_HOME]       The path to the Java installation (defaults to \$JAVA_HOME)"
    echo "   -b    --btype   [BTYPE]           The build type to use. Valid values are P or D (defaults to \$BTYPE)"
    echo "   -n    --no-cache                  Do not read from or write to the sandbox.config cache file"
    echo "   -r    --no-setreloc               Do not source setreloc.sh (this value is never cached)"
    echo "   -s    --no-shell                  Do not start a new subshell at the end of setup. This script should be sourced if this option is used."
}

function determine_variable {
    command_line_var="${!1}"
    cached_var="${!2}"
    env_var_name="$3"
    env_var_value="${!3}"
    if [ ! -z "${command_line_var}" ]; then
        eval "export ${env_var_name}=\"${command_line_var}\""
        src="command line"
    elif [ ! -z "${cached_var}" ]; then
        eval "export ${env_var_name}=\"${cached_var}\""
        src="sandbox.config"
    elif [ ! -z "${env_var_value}" ]; then
        eval "export ${env_var_name}=\"${!env_var_name}\""
        src="environment variable \$${env_var_name}"
    else
        echo "ERROR: $4"
        print_usage
        exit 1
    fi


    printf " %14s : %-50s -- From %s\n" "${env_var_name}" "${!env_var_name}" "${src}"

}

function parse_options {
    # Transform long options into short ones

    for arg in "$@"; do
        shift
        case "$arg" in
            "--help") set -- "$@" "-h" ;;
            "--java") set -- "$@" "-j" ;;
            "--btype") set -- "$@" "-b" ;;
            "--no-cache") set -- "$@" "-n" ;;
            "--no-setreloc") set -- "$@" "-r" ;;
            "--no-shell") set -- "$@" "-s" ;;
            *) set -- "$@" "$arg" ;;
        esac
    done

    OPTIND=1
    NO_CACHE="FALSE"
    while getopts "nhsrj:c:b:" opt; do
        case "$opt" in
            "h") print_usage; exit 0;;
            "j") var_java="$OPTARG";;
            "b") var_btype="$OPTARG";;
            "n") NO_CACHE="TRUE";;
            "r") NO_SETRELOC="TRUE";;
            "s") NO_SHELL="TRUE";;
            *) print_usage; exit 1;;
        esac
    done
    shift $(expr $OPTIND - 1)
    export BUILD_SANDBOX_DIR=$(realpath "$1")
    if [ -z "${BUILD_SANDBOX_DIR}" ]; then
        echo "ERROR: A sandbox must be specified"
        print_usage
        exit 1
    elif [ ! -d "${BUILD_SANDBOX_DIR}" ]; then
        echo "ERROR: The specified sandbox '${BUILD_SANDBOX_DIR}' does not exist or is not a directory"
        print_usage
        exit 1
    fi

    printf " %14s : %-50s\n" "Sandbox root" "${BUILD_SANDBOX_DIR}"


    # Auto detect the ODE context for the current machine
    UNAME=$(uname)
    UNAME_M=$(uname -m)

    case "${UNAME}/${UNAME_M}" in
        Linux/x86_64)
            export CONTEXT="amd64_linux_2"
        ;;
    Linux/ppc64)
        export CONTEXT="ppc_linux_2"
        ;;
    Linux/ppc64le)
        export CONTEXT="ppcle_linux_2"
        ;;
    Linux/s390x)
        export CONTEXT="s390x_linux_2"
        ;;
    AIX/*)
        export CONTEXT="rios_aix_4"
        ;;
    SunOS/sparc)
        export CONTEXT="sparc_solaris_2"
        ;;
    SunOS/i386)
        export CONTEXT="amd64_solaris_2"
        ;;
    HP-UX/ia64)
        export CONTEXT="ia64_hpux_11"
        ;;
    Darwin/x86_64)
        export CONTEXT="amd64_macos_x"
        ;;
    *)
        echo "ERROR: Unknown platform/CPU type combination: ${UNAME}/${UNAME_M}"
        if [[ ! -z "${NO_SHELL}" ]]; then
            exit 1
        else
            return 1
        fi
        ;;
    esac

    printf " %14s : %-50s -- %s/%s\n" "CONTEXT" "${CONTEXT}" "${UNAME}" "${UNAME_M}"

    # Source in any cached config entries
    if [ -f "${BUILD_SANDBOX_DIR}/sandbox.config" ] && [ "${NO_CACHE}" == "FALSE" ]; then
        source "${BUILD_SANDBOX_DIR}/sandbox.config"
    fi

    determine_variable "var_java" "CACHED_JAVA_HOME" "JAVA_HOME" "A Java installation path must be specified."
    determine_variable "var_btype" "CACHED_BTYPE" "BTYPE" "A build type must be specified"

    if [ "${BTYPE}" != "P" ] && [ "${BTYPE}" != "D" ]; then
        echo "ERROR: Unrecognised build type '${BTYPE}'"
        print_usage
        exit 1
    fi

    if [ "${NO_CACHE}" == "FALSE" ]; then
        if [ -f "${BUILD_SANDBOX_DIR}/sandbox.config.new" ]; then
            rm "${BUILD_SANDBOX_DIR}/sandbox.config.new"
        fi

        echo "CACHED_JAVA_HOME=\"${JAVA_HOME}\"" >> "${BUILD_SANDBOX_DIR}/sandbox.config.new"
        echo "CACHED_BTYPE=\"${BTYPE}\"" >> "${BUILD_SANDBOX_DIR}/sandbox.config.new"

        mv "${BUILD_SANDBOX_DIR}/sandbox.config.new" "${BUILD_SANDBOX_DIR}/sandbox.config"
    fi

}

parse_options "$@"

# These are also used by the build system for some reason
export MACHINE=$CONTEXT
export PLATFORM=$CONTEXT

case "$CONTEXT" in
        *_linux_*)
            ODE_VERSION=5.1.3-am
            ODE_DIR="${BUILD_SANDBOX_DIR}/MBBuildPreReqs/ode/${ODE_VERSION}/$CONTEXT"
            export CFLAGS="-DUBUNTU16 $CFLAGS"
            export CXXFLAGS="-DUBUNTU16 $CXXFLAGS"
            export ODEMAKE_SHELL="/bin/bash -c"
            export SUPPRESS_DB2="YES"
            export LD_LIBRARY_PATH="${ODE_DIR}:${LD_LIBRARY_PATH}"
            ;;
        amd64_macos_x)
            ODE_VERSION=5.1
            ODE_DIR="${BUILD_SANDBOX_DIR}/MBBuildPreReqs/ode/${ODE_VERSION}/$CONTEXT"
            export ODEMAKE_SHELL="/bin/bash -c"
            export CFLAGS="-Wno-deprecated-declarations $CFLAGS"
            export CXXFLAGS="-Wno-deprecated-declarations $CXXFLAGS"
            ;;
        rios_aix_4)
            ODE_VERSION=5.1.3-am
            ODE_DIR="${BUILD_SANDBOX_DIR}/MBBuildPreReqs/ode/${ODE_VERSION}/$CONTEXT"
            export LIBPATH="${ODE_DIR}:${LIBPATH}"
            export ODEMAKE_SHELL="/bin/bash -c"
            export SUPPRESS_DB2="YES"
            export OBJECT_MODE=64
            ;;
esac

# Some old parts of the build system apparently need us to define this
# despite this path not having changed in a long time
export PACKAGEBASE="${BUILD_SANDBOX_DIR}/WMB/inst.images/$CONTEXT"

# ODE sets a SOURCEBASE environment variable like PACKAGEBASE which is
# also used by some scripts to determine where WMB/src is
export SOURCEBASE="${BUILD_SANDBOX_DIR}/WMB/src"

# This tries to prevent the build system from scrambling the compiler
# output too badly
export MAKEJOBBUFFERING=99

# Ant is used to build Java related parts of the product. We need to
# use the version we bundle in tree, rather than any version your
# OS may already have installed
export ANT_HOME=$(ls -1 ${BUILD_SANDBOX_DIR}/MBBuildPreReqs/ant/apache-ant* | tail -1)

# We need to add ODE, Java and Ant to the executable path
export PATH="$ANT_HOME/bin:$ODE_DIR:$JAVA_HOME/bin:$PATH"

# Additionally there are some helper scripts in WMB/src/build
export PATH="$SOURCEBASE/build:$PATH"

# Add Gradle, CMake and ninja to the path
GRADLE_VERSION=$(ls -1 "${BUILD_SANDBOX_DIR}/MBBuildPreReqs/gradle" 2>/dev/null | sort -nr | head -n1)
if [ "${GRADLE_VERSION}" != "" ]; then
    export PATH="${BUILD_SANDBOX_DIR}/MBBuildPreReqs/gradle/${GRADLE_VERSION}/bin:${PATH}"
fi

CMAKE_VERSION=$(ls -1 "${BUILD_SANDBOX_DIR}/MBBuildPreReqs/CMake" 2>/dev/null | sort -nr | head -n1)
if [ "${CMAKE_VERSION}" != "" ]; then
    export PATH="${BUILD_SANDBOX_DIR}/MBBuildPreReqs/CMake/${CMAKE_VERSION}/${CONTEXT}/bin:${PATH}"
fi

NINJA_VERSION=$(ls -1 "${BUILD_SANDBOX_DIR}/MBBuildPreReqs/ninja-build" 2>/dev/null | sort -nr | head -n1)
if [ "${NINJA_VERSION}" != "" ]; then
    export PATH="${BUILD_SANDBOX_DIR}/MBBuildPreReqs/ninja-build/${NINJA_VERSION}/${CONTEXT}:${PATH}"
fi

# This will disable the v10 WebUI unit tests from running during
# the WebUI build as they are completely broken
export SUPPRESS="webui_junit"

# This tells the build system where it should look for our
# sandboxrc file
export SANDBOXRC="$BUILD_SANDBOX_DIR/sandboxrc"

# V11 has started to build a large number of native Node.js modules as part of the
# install step for consumption in ICP. We don't want or need these in a
# localbuild usually so disable them now
export MQSI_DONT_INSTALL_ICP_MODULES=1

if [ ! -f "$SANDBOXRC" ]; then
    mkbb -dir "${BUILD_SANDBOX_DIR}" -rc "$SANDBOXRC" -m "$CONTEXT" WMB > /dev/null
fi

export BUILD_SANDBOX=$(realpath --relative-to="${PWD}" "${BUILD_SANDBOX_DIR}" | cut -d ' ' -f 1)
cd "${BUILD_SANDBOX_DIR}/WMB/src"

SAVED_SHELL="${SHELL}"

if [ -z "${NO_SETRELOC}" ]; then
    set +e
    . ./setreloc.sh /var/mqsi "$BUILD_SANDBOX_DIR/WMB"
fi

if [ -z "${NO_SHELL}" ]; then
    # Force bash to use a login shell
    ${SAVED_SHELL} -l
fi
